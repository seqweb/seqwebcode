# SeqWeb Pipeline Rules

## Box-Passing Pattern
```python
def module_function(box: dict, *, input1, input2, optional_param=False, **_rest) -> dict:
    # Process inputs directly as named parameters
    result = process(input1, input2)
    
    # Return the complete box for downstream modules
    return {**box, "output": result}
```

## Core Requirements
- First parameter must be `box: dict` (language-agnostic key-value map)
- Use keyword-only arguments for clarity
- Include `*_rest` for future extensibility
- Return updated box dictionary
- Support destructuring interface for clean parameter access
- Include proper error handling
- Support noisy mode for debugging

## Polyglot Module Structure
- **Inner Function**: Pure function that maps box to box
- **IO Wrapper**: CLI interface exposing box over JSON
- **Program**: Shell-invocable wrapper around module
- **Native Composition**: Direct function calls within same language
- **Shell Execution**: Cross-language execution via subprocesses

## Pipeline Stages (OEIS → RDF)
1. **Parse**: .seq files → structured data
2. **Validate**: Data validation and error handling
3. **Transform**: Apply conversion rules and mappings
4. **Enrich**: Add semantic annotations and relationships
5. **Serialize**: Generate .ttl RDF output
6. **Validate**: RDF validation and quality checks

## Cross-Language Execution
- Modules derive inbox from command-line arguments
- Use language-native CLI parsing conventions
- Serialize outbox to JSON on stdout
- Support optional `--inbox-json` for structured input
- Default to empty box if no preload mechanism

## Error Handling
- Catch and log all exceptions
- Provide meaningful error messages
- Include context in error logs
- Support retry mechanisms
- Maintain pipeline state across failures

## Logging
- Use consistent log levels
- Include module names and stage information
- Log input/output when noisy mode enabled
- Track timing information
- Record error details with context
description:
globs:
alwaysApply: false
---
